OOP

Объектно ориентированное программирование

- Инкапсуляция

разберём пример:

let obj = {
	name: '...',
	age: 18,

	_description: '',
}

И вот у description стоит _ это означает, что оно зарезервированно

И его так изменить нельзя 
obj._description = '...';

Но, мы можем сделать функцию, которая будет изменять description:

let obj = {
	name: '...',
	age: 18,

	_description: '',

	setDescription(value) {
		this._description = value
	}
}

и вот эту функцию мы уже можем вызвать за пределами obj

obj.setDescription('...')


Еще можно сделать функцию для получения значения _description


let obj = {
	name: '...',
	age: 18,

	_description: '',

	setDescription(value) {
		this._description = value
	},

	getDescription(){
		return this._description
	}
}
obj.setDescription('...')
obj.getDescription()

То есть по сути у приватных свойств есть методы
Setter && Getter

И не только..

То есть это интерфейс.

То есть мы специально скрываем свойства, и создаём функцию которая работает с этими свойствами
Это как в реакте, есть много функций, которые МЫ не знаем как работают внутри, как бы всё спрятано 
И говорят - пользуйтесь этими методами


Для чего же мы создали store

То есть опять же  state тупой объект, у него нет методов: например getState и т.д.
То есть он не функциональный

и поэтому мы создаём store / redux по правилам OOP

- Наша задача, как программиста создать качественный state managment
и сейчас мы пишем что-то похожее на redux, то есть понимаем, как он работает