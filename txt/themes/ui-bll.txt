Ui BLL

UI - user interface (пользовательский интерфейс) (React)
BLL - Business Logic Layer (Redux)
И в BLL хранятся массивы, какие либо данные и т.д.

И то есть из BLL мы передаём данные в UI и он уже оживляет наши данные

Вынесение данных в сторону, или же в массив

То есть мы выносим данные в отдельный массив, и в этом массиве есть объекты с этими данными

Пример:

const data = [
	{
		"name": "...",
		"age": 18,
	},
		{
		"name": "...",
		"age": 18,
	},
		{
		"name": "...",
		"age": 18,
	},
]

То есть допустим у нас будет компонент, который вызывается много раз с разными пропсами
И для удобства, можно не просто делать так:
<Component name="..." age="18" />
<Component name="///" age="18" />
<Component name="!!!" age="18" />

А сделать отдельный массив с данными, и с помощью метода map всё развернуть:


{ data.map(item => (
	<Component props={item}  />
)) }

это случай, если мы пишем map в return
а если за пределами, то нужно просто взять в переменную 
let newData = data.map(item => (
	<Component props={item}  />
)) 

и уже в return как переменную вывести

{ newData }

И вот тут мы проходим по массиву data и в качестве итерируемого элемента,  возьмём переменную item
Далее будем вызывать наш Компонент и передавать в качестве пропса наш item или же объект с данными:

	{
		"name": "...",
		"age": 18,
	}


Потом в компоненте нужно принять пропсы 

И во избежании ошибок следует добавить атрибут key со значением id, которое тоже следует писать в data, 
это делается для того, чтобы каждый элемент который мы выводим, был уникальным
const Component = ( props ) => {
return (
	<div key={props.id}>
	<p>props.name</p>
		<p>props.age</p>
</div>
)
}


Также стоит отметить, если react видит массив, то он его раскрывает ...array и если там компоненты, то они выводятся на экран

return (
	const data = [
	<Component />
	<Component />
	<Component />	
]
)

Это всё выведится в браузер